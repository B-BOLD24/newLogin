#include <iostream>
using namespace std;

class CircularQueue {
private:
    int* queue;       // Array to store elements
    int maxSize;      // Maximum size of the queue
    int head, tail;   // Head and tail pointers

public:
    // Constructor to initialize the queue
    CircularQueue(int size) {
        maxSize = size;
        queue = new int[maxSize];
        head = -1;
        tail = -1;
    }

    // Destructor to free allocated memory
    ~CircularQueue() {
        delete[] queue;
    }

    // Enqueue operation: Add an element to the queue
    void enqueue(int data) {
        if ((tail + 1) % maxSize == head) {
            cout << "Queue is full!" << endl;
            return;
        }
        if (head == -1) { // If queue is empty, set head to 0
            head = 0;
        }
        tail = (tail + 1) % maxSize; // Increment tail circularly
        queue[tail] = data;
        cout << "Enqueued: " << data << endl;
    }

    // Dequeue operation: Remove an element from the queue
    void dequeue() {
        if (head == -1) {
            cout << "Queue is empty!" << endl;
            return;
        }
        cout << "Dequeued: " << queue[head] << endl;
        if (head == tail) { // If the queue becomes empty after dequeue
            head = -1;
            tail = -1;
        } else {
            head = (head + 1) % maxSize; // Increment head circularly
        }
    }

    // Calculate and return the size of the queue
    int size() const {
        if (head == -1) {
            return 0; // Queue is empty
        }
        if (tail >= head) {
            return (tail - head) + 1;
        } else {
            return maxSize - (head - tail) + 1;
        }
    }

    // Display the elements of the queue
    void display() const {
        if (head == -1) {
            cout << "Queue is empty!" << endl;
            return;
        }
        cout << "Queue elements: ";
        int i = head;
        while (true) {
            cout << queue[i] << " ";
            if (i == tail) break; // Stop when reaching the tail
            i = (i + 1) % maxSize;
        }
        cout << endl;
    }
};

int main() {
    int maxSize, choice, data;

    cout << "Enter the maximum size of the circular queue: ";
    cin >> maxSize;

    CircularQueue queue(maxSize);

    while (true) {
        cout << "\n--- Circular Queue Operations ---" << endl;
        cout << "1. Enqueue" << endl;
        cout << "2. Dequeue" << endl;
        cout << "3. Display Queue" << endl;
        cout << "4. Size of Queue" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter the element to enqueue: ";
                cin >> data;
                queue.enqueue(data);
                break;

            case 2:
                queue.dequeue();
                break;

            case 3:
                queue.display();
                break;

            case 4:
                cout << "Size of queue: " << queue.size() << endl;
                break;

            case 5:
                cout << "Exiting the program." << endl;
                return 0;

            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    }
}
